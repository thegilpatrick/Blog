[
  {
    "objectID": "posts/your-life-in-weeks/index.html",
    "href": "posts/your-life-in-weeks/index.html",
    "title": "Your Life in Weeks",
    "section": "",
    "text": "Here is a little existential angst for your . Each red box is a week of your life. Each gray box in addition is a week left in an average individual’s lifetime in the US.\n\n\nCode\nviewof birthdate = Inputs.date({label: \"Your Birthday\", value:\"1991-11-11\", required: true, submit: true, width})\n\n\n\n\n\n\n\n\n\nCode\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\nwaffles = addAnimation(Plot.plot({\n  width,\n  color: {\n    range: [\"red\", \"lightgray\"]\n  },\n  marks: [\n    Plot.cell(\n      units,\n      Plot.stackY({\n        x: (_, i) =&gt; i % 52,\n        fillOpacity: 0,\n        fill: \"group\"\n      })\n    )],\n  x: { axis: null },\n  y: { axis: null }\n}), { type: \"rect\", fillOpacity: 1, delay: 2 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis was my inspiration. Also thanks to Fil for the waffle chart notebook"
  },
  {
    "objectID": "posts/your-life-in-weeks/index.html#introduction",
    "href": "posts/your-life-in-weeks/index.html#introduction",
    "title": "Your Life in Weeks",
    "section": "",
    "text": "Here is a little existential angst for your . Each red box is a week of your life. Each gray box in addition is a week left in an average individual’s lifetime in the US.\n\n\nCode\nviewof birthdate = Inputs.date({label: \"Your Birthday\", value:\"1991-11-11\", required: true, submit: true, width})\n\n\n\n\n\n\n\n\n\nCode\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\nwaffles = addAnimation(Plot.plot({\n  width,\n  color: {\n    range: [\"red\", \"lightgray\"]\n  },\n  marks: [\n    Plot.cell(\n      units,\n      Plot.stackY({\n        x: (_, i) =&gt; i % 52,\n        fillOpacity: 0,\n        fill: \"group\"\n      })\n    )],\n  x: { axis: null },\n  y: { axis: null }\n}), { type: \"rect\", fillOpacity: 1, delay: 2 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis was my inspiration. Also thanks to Fil for the waffle chart notebook"
  },
  {
    "objectID": "posts/your-life-in-weeks/index.html#math",
    "href": "posts/your-life-in-weeks/index.html#math",
    "title": "Your Life in Weeks",
    "section": "Math",
    "text": "Math\n\ntoday = new Date()\n\nday = today.getDay()\n\nDifference_Today = today.getTime() - birthdate.getTime();\n\nLife_In_Weeks = +((Difference_Today / (1000 * 3600 * 24)) / 7).toFixed(0);\n\nUS_Life_Expectancy_2020 = 77.0 * 52\n\nDifference_In_Life = US_Life_Expectancy_2020 - Life_In_Weeks\n\nweek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\ndata = [\n  {group: \"Life\", number: Life_In_Weeks},\n  {group: \"Total\", number: Difference_In_Life}\n]\n\nunits = data.flatMap(d =&gt; d3.range(Math.round(d.number)).map(() =&gt; d))"
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html",
    "href": "posts/recipe-web-scrape/index.html",
    "title": "Recipe Web Scraping in Observable",
    "section": "",
    "text": "This web scraping blog post is heavily inspired by the Paprika App which I just started using. It saves the recipe information and gets rid of all of the annoying ads. My biggest pet peeve is scrolling through 5 million pop-up ads to get to a recipe. This blog post is really just to see if I could web scrape in ObservableJS. I plan on creating an actual recipe web app with Sveltekit eventually where I can save recipe information to my own database. But for now this is my proof of concept."
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#introduction",
    "href": "posts/recipe-web-scrape/index.html#introduction",
    "title": "Recipe Web Scraping in Observable",
    "section": "",
    "text": "This web scraping blog post is heavily inspired by the Paprika App which I just started using. It saves the recipe information and gets rid of all of the annoying ads. My biggest pet peeve is scrolling through 5 million pop-up ads to get to a recipe. This blog post is really just to see if I could web scrape in ObservableJS. I plan on creating an actual recipe web app with Sveltekit eventually where I can save recipe information to my own database. But for now this is my proof of concept."
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#how-it-works",
    "href": "posts/recipe-web-scrape/index.html#how-it-works",
    "title": "Recipe Web Scraping in Observable",
    "section": "How it Works",
    "text": "How it Works\nI stumbled upon Ben Awad’s blog post on scraping recipe websites. It turns out that most websites have metadata for search engines. Nicolas Lambert’s Observable Notebook shows how you can use both Axios and Cheerio in ObservableJS to web scrape data.\n\n\n\n\n\n\nTip\n\n\n\nOne problem with this method is that if a recipe website uses purely JavaScript you might need to do more work (look into Selenium or Puppeteer).\n\n\n\naxios = require('https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')\n\nresult = axios({\n  method: \"get\",\n  url: `https://corsproxy.io/?${input}`\n}).then((result) =&gt; result.data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost of the time recipe websites will not have CORS enabled so to get the request you will need to set up a CORS proxy server. So the above code gets the HTML request via the Axios library. Here is what the raw HTML looks like.\n\n\nCode\nresult\n\n\n\n\n\n\n\nWe need to parse the HTML with the the Cheerio.js library to find the script with type=\"application/ld+json\" this is the metadata.\n\ncheerio = require('https://bundle.run/cheerio@1.0.0-rc.5')\n\n$ = cheerio.load(result)\n\njsonRaw = $(\"script[type='application/ld+json']\")[0].children[0].data\n\njson = JSON.parse(jsonRaw)\n\njson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvery website has their metadata organized slightly differently so I created this function to check for where the recipe data is. It is not very elegant but it gets the job done most of the time.\n\nfunction checkRecipe(json) {\n  let recipe;\n  if (json.hasOwnProperty(\"@graph\")) {\n  const object = json[\"@graph\"].filter(obj =&gt; { return obj[\"@type\"] === \"Recipe\"});\n    recipe = object[0];\n  } else {\n    recipe = json[0];\n  }\n  return recipe;\n}\n\ndata = checkRecipe(json)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen I just pull out the relevant info that I want.\n\n\nCode\nname = data.name\n\npic = data.image[0] ? data.image[0] : data.image.url\n\ningredients = Object.assign(data.recipeIngredient)\n\ninstructions = Object.assign(data.recipeInstructions).map((item) =&gt; {\n  return item['text'];\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGo ahead and try your favorite recipe website and let me know how it goes.\n\n\nCode\nviewof input = Inputs.text({label: \"Recipe URL\", width:width, value: \"https://justinesnacks.com/courgette-tart-with-lemon-ricotta/\", submit: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the recipe website uses WordPress or something similar it has a higher likelihood of working 🤞. But there are no guarantees in the world of web scraping.\n\n\nHere are a couple of sites that work:\n\nDishing Out Health\nBudget Bytes\nAmbitious Kitchen\nSally’s Baking Addiction\nCookerru"
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#recipe",
    "href": "posts/recipe-web-scrape/index.html#recipe",
    "title": "Recipe Web Scraping in Observable",
    "section": "Recipe",
    "text": "Recipe\n\n\nCode\nmd`### ${name}`\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;img style=\"object-fit: cover;\" height=\"600\" width=\"100%\" src=\"${pic}\"&gt;`\n\n\n\n\n\n\n\n\n\nHere I use D3 to create the ingredient and recipe lists.\n\n\nCode\ningredientList = {\n  const ul = d3.create('ul');\n  \n  ul.selectAll('li')  \n    .data(ingredients)   \n    .join('li')       \n      .text(d =&gt; `${d}`) \n  \n  return ul.node(); \n}\n\ninstructionList = {\n  const ol = d3.create('ol');\n  \n  ol.selectAll('li')  \n    .data(instructions)   \n    .join('li')       \n      .text(d =&gt; `${d}`) \n  \n  return ol.node(); \n}"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html",
    "href": "posts/nba-stats-exploration/index.html",
    "title": "NBA Stats Exploration",
    "section": "",
    "text": "Hello! This first chart explores all of the seasons in this dataset that I found on Kaggle. I organized the stats by team and you can pick whichever statistic and season(s) you would like to compare. If you mouseover the dots you can see the player’s name. If you go back far enough you can even see some old teams.\n\n\nCode\nexploreChart = Plot.plot({\n  grid: true,\n  marginRight: 60,\n  width: width,\n  x: { label: null, tickRotate: 90 },\n  fy: { tickPadding: -15 },\n  facet: {\n    data: filtered,\n    y: \"season\",\n    label: null\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(filtered, {\n      x: \"team\",\n      y: radio,\n      title: \"player\",\n      stroke: \"team\"\n    }),\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio = Inputs.radio(stats, { value: stats[0], width:width })\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(nba, (d) =&gt; d.season),\n  { key: [\"2018-19\", \"2019-20\", \"2020-21\"]}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I wanted to compare the best players in this era. So I selected the players who were top ten in average points, rebounds, or assists in the NBA over this time period (with at least 10 seasons played). Can you guess who the noodles are in these spaghetti charts? You can mouseover the noodles for the player name and/or toggle the checkbox below to show more detailed statistics of each chart. The results are surprising (at least to me).\n\n\n\n\n\n\nNote\n\n\n\nThis is not an optimal way of finding the best NBA players of all time as I only had a snapshot of about 25 seasons. Great players who play/played on either end of this timeline may not have truly been captured by these charts."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#introduction",
    "href": "posts/nba-stats-exploration/index.html#introduction",
    "title": "NBA Stats Exploration",
    "section": "",
    "text": "Hello! This first chart explores all of the seasons in this dataset that I found on Kaggle. I organized the stats by team and you can pick whichever statistic and season(s) you would like to compare. If you mouseover the dots you can see the player’s name. If you go back far enough you can even see some old teams.\n\n\nCode\nexploreChart = Plot.plot({\n  grid: true,\n  marginRight: 60,\n  width: width,\n  x: { label: null, tickRotate: 90 },\n  fy: { tickPadding: -15 },\n  facet: {\n    data: filtered,\n    y: \"season\",\n    label: null\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(filtered, {\n      x: \"team\",\n      y: radio,\n      title: \"player\",\n      stroke: \"team\"\n    }),\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio = Inputs.radio(stats, { value: stats[0], width:width })\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(nba, (d) =&gt; d.season),\n  { key: [\"2018-19\", \"2019-20\", \"2020-21\"]}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I wanted to compare the best players in this era. So I selected the players who were top ten in average points, rebounds, or assists in the NBA over this time period (with at least 10 seasons played). Can you guess who the noodles are in these spaghetti charts? You can mouseover the noodles for the player name and/or toggle the checkbox below to show more detailed statistics of each chart. The results are surprising (at least to me).\n\n\n\n\n\n\nNote\n\n\n\nThis is not an optimal way of finding the best NBA players of all time as I only had a snapshot of about 25 seasons. Great players who play/played on either end of this timeline may not have truly been captured by these charts."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-scorers",
    "href": "posts/nba-stats-exploration/index.html#top-scorers",
    "title": "NBA Stats Exploration",
    "section": "Top Scorers",
    "text": "Top Scorers\n\n\nCode\nptsChart = makeChart1(showPtsChart)\n\nviewof showPtsChart = Inputs.toggle({label: \"Show Stats\", values: [\"ptsChart2\", \"ptsChart1\"]})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-rebounders",
    "href": "posts/nba-stats-exploration/index.html#top-rebounders",
    "title": "NBA Stats Exploration",
    "section": "Top Rebounders",
    "text": "Top Rebounders\n\n\nCode\nrebChart = makeChart2(showRebChart)\n\nviewof showRebChart = Inputs.toggle({label: \"Show Stats\", values: [\"rebChart2\", \"rebChart1\"]})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-assisters",
    "href": "posts/nba-stats-exploration/index.html#top-assisters",
    "title": "NBA Stats Exploration",
    "section": "Top Assisters",
    "text": "Top Assisters\n\n\nCode\nastChart = makeChart3(showAstChart)\n\nviewof showAstChart = Inputs.toggle({label: \"Show Stats\", values: [\"astChart2\", \"astChart1\"]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs an employee of University of Michigan (go blue!!) and as a husband of a Canadian, I created some charts where you can filter by players’ college or country."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#players-by-college",
    "href": "posts/nba-stats-exploration/index.html#players-by-college",
    "title": "NBA Stats Exploration",
    "section": "Players by College",
    "text": "Players by College\n\n\nCode\ncollegeChart = Plot.plot({\n  grid: true, \n  width: width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.college === collegepick), {\n      x: \"season\",\n      y: radio2,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.college === collegepick), {\n      x: \"season\",\n      y: radio2,\n      stroke: \"player\",\n    curve: \"catmull-rom\"})\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio2 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof collegepick = Inputs.select(nba.map(d =&gt; d.college), {label: \"College\", value: \"Michigan\", sort: true, unique: true})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#players-by-country",
    "href": "posts/nba-stats-exploration/index.html#players-by-country",
    "title": "NBA Stats Exploration",
    "section": "Players by Country",
    "text": "Players by Country\n\n\nCode\ncountryChart = Plot.plot({\n  grid: true, \n  width: width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.country === countrypick), {\n      x: \"season\",\n      y: radio3,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.country === countrypick), {\n      x: \"season\",\n      y: radio3,\n      stroke: \"player\",\n    curve: \"catmull-rom\"})\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio3 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof countrypick = Inputs.select(nba.map(d =&gt; d.country), {label: \"Country\", value: \"Canada\", sort: true, unique: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd finally pick your five favorite players in this era to compare their stats."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#compare-your-favorite-players",
    "href": "posts/nba-stats-exploration/index.html#compare-your-favorite-players",
    "title": "NBA Stats Exploration",
    "section": "Compare Your Favorite Players",
    "text": "Compare Your Favorite Players\n\n\nCode\nfavChart = Plot.plot({\n  grid: true,\n  width: width,\n  marginBottom: 60,\n  marginRight: 70,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick1), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick1), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick1), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick2), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick2), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick2), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick3), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick3), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick3), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick4), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick4), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick4), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick5), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick5), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick5), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6}))\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio4 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof playerpick1 = Inputs.text({label: \"Player #1\", placeholder: \"Enter player's name\", value: \"LeBron James\"})\n\nviewof playerpick2 = Inputs.text({label: \"Player #2\", placeholder: \"Enter player's name\", value: \"Kobe Bryant\"})\n\nviewof playerpick3 = Inputs.text({label: \"Player #3\", placeholder: \"Enter player's name\", value: \"Kevin Durant\"})\n\nviewof playerpick4 = Inputs.text({label: \"Player #4\", placeholder: \"Enter player's name\", value: \"Russell Westbrook\"})\n\nviewof playerpick5 = Inputs.text({label: \"Player #5\", placeholder: \"Enter player's name\", value: \"Chris Paul\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThanks for making it to the end!"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#appendix",
    "href": "posts/nba-stats-exploration/index.html#appendix",
    "title": "NBA Stats Exploration",
    "section": "Appendix",
    "text": "Appendix\n\nPlots\n\nimport { Plot } from \"@mkfreeman/plot-tooltip\"\n\nmakeChart1 = (showPtsChart) =&gt; {\n  return showPtsChart === \"ptsChart1\" ? ptsChart1() : ptsChart2()\n}\n\nptsChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", strokeOpacity: 0, title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nptsChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  \n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\nmakeChart2 = (showRebChart) =&gt; {\n  return showRebChart === \"rebChart1\" ? rebChart1() : rebChart2()\n}\n\nrebChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n    \n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nrebChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\nmakeChart3 = (showAstChart) =&gt; {\n  return showAstChart === \"astChart1\" ? astChart1() : astChart2()\n}\n\nastChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n    \n    Plot.line(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nastChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData\n\nimport { aq, op } from '@uwdata/arquero'\n\ndata = FileAttachment(\"all_seasons.csv\").csv()\n\nstats = [\"Points\", \"Rebounds\", \"Assists\", \"Games Played\", \"Height\", \"Age\"]\n\nstats2 = [\"Points\", \"Rebounds\", \"Assists\"]\n\nnba = {\n  const subset = data.map(\n    ({\n      player_name,\n      team_abbreviation,\n      age,\n      college,\n      country,\n      gp,\n      pts,\n      reb,\n      ast,\n      season,\n      player_height,\n      player_weight,\n      draft_round,\n      draft_number,\n      usg_pct,\n      ts_pct\n    }) =&gt; ({\n      player: player_name,\n      team: team_abbreviation,\n      Age: +age,\n      college: college,\n      country: country,\n      [\"Games Played\"]: +gp,\n      Points: +pts,\n      Rebounds: +reb,\n      Assists: +ast,\n      season: season.toString(),\n      Height: +player_height,\n      Weight: +player_weight,\n      draft_round: draft_round,\n      draft_number: +draft_number,\n      [\"Usage Percentage\"]: +(usg_pct * 100),\n      [\"True Shooting Percentage\"]: +(ts_pct * 100)\n    })\n  );\n\n  return subset;\n}\n\nfiltered = checkbox.flat()\n\nviewof nba2 = aq \n  .fromCSV(await FileAttachment('all_seasons.csv').text())\n  .view({ height: 240 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_pts: d =&gt; op.mean(d.pts),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10)\n  .orderby(aq.desc('mean_pts'))\n  .slice(0,10)\n  .view(10)\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_reb: d =&gt; op.mean(d.reb),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10) \n  .orderby(aq.desc('mean_reb'))\n  .slice(0,10)\n  .view(10)\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_ast: d =&gt; op.mean(d.ast),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10) \n  .orderby(aq.desc('mean_ast'))\n  .slice(0,10)\n  .view(10)"
  },
  {
    "objectID": "posts/google-sheets/index.html",
    "href": "posts/google-sheets/index.html",
    "title": "Google Sheets in Observable",
    "section": "",
    "text": "Google Sheets are a great way to stream data into your Quarto workflow with Observable. D3 has a handy way of fetching different data files if you provide the URL. This is Observable’s recommended way of going about it. I find Google Sheets great for small datasets that are updated frequently."
  },
  {
    "objectID": "posts/google-sheets/index.html#introduction",
    "href": "posts/google-sheets/index.html#introduction",
    "title": "Google Sheets in Observable",
    "section": "",
    "text": "Google Sheets are a great way to stream data into your Quarto workflow with Observable. D3 has a handy way of fetching different data files if you provide the URL. This is Observable’s recommended way of going about it. I find Google Sheets great for small datasets that are updated frequently."
  },
  {
    "objectID": "posts/google-sheets/index.html#read-a-google-sheet",
    "href": "posts/google-sheets/index.html#read-a-google-sheet",
    "title": "Google Sheets in Observable",
    "section": "Read a Google Sheet",
    "text": "Read a Google Sheet\nHere is an example that is taken from Observable’s Google Sheets Starter Notebook.\n\ngetCsvUrl = url =&gt; {\n  url = new URL(url);\n  const id = url.pathname.split(\"/\")[3]\n  const gid = new URLSearchParams(url.hash.slice(1)).get(\"gid\") || 0;\n  return `https://docs.google.com/spreadsheets/d/${id}/export?format=csv&gid=${gid}`\n}\n\n// Above converts a Google Sheets website URL to its CSV URL.\n// You can also go to “File → Publish to web”, select the “Comma-separated values (.csv)” \n// type, select the sheet with your data, and use that CSV URL directly with `d3.csv` above.\n// If you need data to update faster, try the Google Sheets \n// API: https://stackoverflow.com/questions/30082277/accessing-a-new-style-public-google-sheet-as-json/44479726#44479726\n\ndata = d3.csv(getCsvUrl(\"https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0\"), d3.autoType)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI replaced the URL with the Data is Plural Google Sheet.1 I hooked it up to a search input and a table where you can select a row to see the details and dataset links.\n\n\nCode\nviewof search = Inputs.search(data)\n\nviewof dataset = Inputs.table(search, {sort: \"edition\", reverse: true, multiple: false, required: false, value: search[1600]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncheck(dataset)\n\n\n\n\n\n\n\n\n\nCode\ncheck = (dataset) =&gt; {\n  return dataset ? md`### ${dataset.headline}\n${dataset.text}\n${dataset.links}` : md`Ooops! Please select a row from the table.`\n}"
  },
  {
    "objectID": "posts/google-sheets/index.html#try-it-yourself",
    "href": "posts/google-sheets/index.html#try-it-yourself",
    "title": "Google Sheets in Observable",
    "section": "Try it Yourself",
    "text": "Try it Yourself\nYou can link to any public Google Sheet below and see the results. Go ahead and copy the URL and click submit. This is The Pudding’s backlog of ideas.\n\n\nCode\nviewof url = Inputs.text({label: \"Google Sheet URL\", width:width, value: \"https://docs.google.com/spreadsheets/d/1neuenck0xy5piNZaaxPhPL0Wsmpe_-gqFjeXqV3MbZE/edit#gid=0\", submit: true})\n\nexample = d3.csv(getCsvUrl(url), d3.autoType)\n\nInputs.table(example)"
  },
  {
    "objectID": "posts/google-sheets/index.html#wikipedia-tables",
    "href": "posts/google-sheets/index.html#wikipedia-tables",
    "title": "Google Sheets in Observable",
    "section": "Wikipedia Tables",
    "text": "Wikipedia Tables\nGoogle Sheets also have a super simple way of web scraping. I find it pretty useful for scraping Wikipedia tables. For example, here is a table of state capitals from Wikipedia with some relevant statistics. All I need to do is enter this formula =IMPORTHTML(\"url\", \"table\", index) in Google Sheets. You just need the URL, the script tag2, and the index of the tag on the page.3 Here is the full formula I used below:\n=IMPORTHTML(\"https://en.wikipedia.org/wiki/List_of_capitals_in_the_United_States\", \"table\", 2)\nWhen using tables from Wikipedia some of the column headers may have sub-categories that make the data a little messy. But it is easy to clean up in a Google Sheet. Just copy the values and paste only the values ctrl + shift + v back into the sheet. Then you can edit the values directly. d3.autoType did not detect the date variable here so I fixed it. Also I created new variables with a new names for convenience.\n\n\nCode\nwikipedia = d3.csv(getCsvUrl(\"https://docs.google.com/spreadsheets/d/1nBuDIKv67qX73UXsQy-Gd_cJc609NJPugLQy3Dlp4Tw/edit#gid=0\"), d3.autoType)\n\nparseDate = d3.utcParse(\"%Y\")\n\nclean_wiki = wikipedia.map(d =&gt; ({...d, population: d.MSA, date: parseDate(d.Since)}))\n\nInputs.table(clean_wiki)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe charts below are heavily inspired by Mike Bostock’s Bank Failures Plot.\n\nState Capitals by Land Area\n\n\nCode\nPlot.plot({\n  height: 500,\n  width,\n  insetRight: 70,\n  y: {axis: null},\n  r: {range: [0, 100]},\n  marks: [\n    Plot.dot(clean_wiki, Plot.dodgeY({x: \"date\", anchor: \"bottom\", r: \"Area\", title: (d) =&gt; `${d.Capital}\\n${d.Area} square miles`,\n        fill: \"powderblue\", strokeWidth: 1, stroke: \"#000\"})),\n     Plot.text(\n      clean_wiki,\n      Plot.filter((d) =&gt; d.Area &gt; 100,\n       Plot.dodgeY({\n        anchor: \"bottom\",\n        padding: 2,\n        x: \"date\",\n        lineWidth: 5,\n        r: \"Area\",\n        text: (d) =&gt; d.Area &gt; 350 \n          ? `${d.Capital}\\n${d.Area} sq. miles` \n          : `${d.Area}`,\n        pointerEvents: \"none\",\n        fill: \"#000\",\n        stroke: \"powderblue\"})))\n        ]\n})\n\n\n\n\n\n\n\n\n\nState Capitals by Population Size\n\n\nCode\nPlot.plot({\n  height: 800,\n  width,\n  insetRight: 40,\n  y: {axis: null},\n  r: {range: [0, 60]},\n  marks: [\n    Plot.dot(clean_wiki, Plot.dodgeY({x: \"date\", anchor: \"bottom\", r: \"population\", title: (d) =&gt; `${d.Capital}\\n${(d.population/ 1000000).toFixed(1)}M`,\n        fill: \"thistle\", strokeWidth: 1, stroke: \"#000\"})),\n     Plot.text(\n      clean_wiki,\n      Plot.filter((d) =&gt; d.population &gt; 1000000,\n       Plot.dodgeY({\n        anchor: \"bottom\",\n        //padding: 2,\n        x: \"date\",\n        //lineWidth: 5,\n        r: \"population\",\n        text: (d) =&gt; d.population &gt; 1900000 \n          ? `${d.Capital}\\n${(d.population/ 1000000).toFixed(1)}M` \n          : `${(d.population/ 1000000).toFixed(1)}M`,\n        pointerEvents: \"none\",\n        fill: \"#000\",\n        stroke: \"thistle\"})))\n        ]\n})"
  },
  {
    "objectID": "posts/google-sheets/index.html#write-to-a-google-sheet",
    "href": "posts/google-sheets/index.html#write-to-a-google-sheet",
    "title": "Google Sheets in Observable",
    "section": "Write to a Google Sheet",
    "text": "Write to a Google Sheet\nYou can also embed a Google Form in an &lt;iframe&gt;. After you submit the form, if you refresh this page the form data appears. Check it out!\n\n\nCode\nhtml`&lt;iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSe_Cw481ZPBImeBoqhrYRmXaci6iHZcfBsWUMovS4dGNRl_kw/viewform?embedded=true\" width=\"${width}$\" height=\"800\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"&gt;Loading…&lt;/iframe&gt;`\n\n\n\n\n\n\n\n\n\nCode\ngoogle_form = d3.csv(getCsvUrl(\"https://docs.google.com/spreadsheets/d/1gV7Rg3Vz3nAQKQhi0fXGfa63qIABDYVr-msD96qSD1w/edit?resourcekey#gid=1990814415\"), d3.autoType)\n\nInputs.table(google_form)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  inset: 10,\n  grid: true,\n  marks: [\n    Plot.line(google_form, {x: \"Timestamp\", y: \"Pick a Number\", curve: \"catmull-rom\", marker: true}),\n    Plot.text(google_form, {x: \"Timestamp\", y: \"Pick a Number\", text: (d) =&gt; `${d[\"Write Something Here\"]}`, dy: -8})\n  ]\n})\n\n\n\n\n\n\n\n\n\nThat is all I have for now. Thanks for reading!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hey! I’m Scott Franz",
    "section": "",
    "text": "I am the Editor of The Gilpatrick. Currently, I am the only author of this blog, but I hope in the future that changes 🤞. If you are interested in collaborationg on a data project or writing a blog post feel free to reach out via email.\nI work as a data wrangler at the Institute for Social Resarch. I volunteer for Walk Bike Washtenaw an organization helping create safer and more comfortable transportation infrastructure for people in and around Ann Arbor, MI 🌳.\nI designed a study and wrote a paper about mindfulness, connection to nature, and pro-environmental behavior. I also helped analyze mother-adolscent conversations about volunteering in graduate school.\nThe timeline below indicates approximations of where I have spent my time thus far.\n\nimport { Plot } from \"@mkfreeman/plot-tooltip\"\n\ncareer = FileAttachment(\"career.csv\").csv({typed: true})\n\n\nparseDate = d3.utcParse(\"%Y\")\n\nclean_career = career.map(d =&gt; ({...d, start2: parseDate(d.start), end2: parseDate(d.end)}))\n\n\nPlot.plot({\n  marginLeft: 45,\n  width,\n  axis: null,\n  color: {\n    scheme: \"pastel2\"\n  },\n  x: {\n    axis: \"top\",\n    grid: true,\n  },\n  marks: [\n    Plot.barX(clean_career, {\n      x1: \"start2\",\n      x2: \"end2\",\n      fill: \"type\",\n      y: \"institution\",\n      title: (d) =&gt; `${d.title}`,\n      sort: {y: \"x1\"}\n    }),\n    Plot.text(clean_career, {\n      x: \"start2\",\n      y: \"institution\",\n      text: \"institution\",\n      textAnchor: \"end\",\n      dx: -3\n    })\n  ],\n  tooltip: {\n    stroke: \"cornflowerblue\"\n  }\n})"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Gilpatrick",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nOJS Code Annotation\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle Sheets in Observable\n\n\n5 min\n\n\n\nObservable JS\n\n\nGoogle Sheets\n\n\nTutorial\n\n\nWeb Scraping\n\n\n\nTutorial on how to use Google Sheets with Observable in Quarto.\n\n\n\nScott Franz\n\n\nJul 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecipe Web Scraping in Observable\n\n\n3 min\n\n\n\nObservable JS\n\n\nWeb Scraping\n\n\nTutorial\n\n\n\nTutorial on how to web scrape recipes with Observable in Quarto.\n\n\n\nScott Franz\n\n\nJun 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUK Pet Cats\n\n\n4 min\n\n\n\nTidy Tuesday\n\n\nObservable JS\n\n\n\nA Tidy Tuesday visualization of UK pet cats.\n\n\n\nScott Franz\n\n\nJan 31, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR TidyCensus with Observable\n\n\n13 min\n\n\n\nObservable JS\n\n\nR\n\n\nTidyCensus\n\n\nMaps\n\n\nTutorial\n\n\n\nTutorial on how to use the R TidyCensus package with Observable in Quarto.\n\n\n\nScott Franz\n\n\nJan 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello, Observable!\n\n\n12 min\n\n\n\nObservable JS\n\n\nTutorial\n\n\n\nA quick glance at Observable. A new reactive programming ecosystem geared towards data visualization.\n\n\n\nScott Franz\n\n\nMay 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Stats Exploration\n\n\n21 min\n\n\n\nObservable JS\n\n\nNBA\n\n\n\nAn exploration of NBA players from 1996 to 2021. A look into the top players of that era.\n\n\n\nScott Franz\n\n\nMar 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Life in Weeks\n\n\n2 min\n\n\n\nObservable JS\n\n\nCalculator\n\n\n\nA waffle chart displaying how many weeks you have lived, and how many you have left.\n\n\n\nScott Franz\n\n\nFeb 22, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/github-issue/index.html",
    "href": "posts/github-issue/index.html",
    "title": "OJS Code Annotation",
    "section": "",
    "text": "variable = 5;\n\n\n1\n\nDoes this work?"
  },
  {
    "objectID": "posts/hello-observable/index.html",
    "href": "posts/hello-observable/index.html",
    "title": "Hello, Observable!",
    "section": "",
    "text": "Observable is a new environment for JavaScript with a couple of tweaks (also supports HTML, CSS, Markdown, SQL, and TeX). It is the brainchild of Mike Bostock (D3.js creator). What sets Observable apart from previous programming notebook environments is its reactive runtime. In previous notebook iterations like Jupyter and R Markdown each cell could only reference previous cells in a certain order (from top to bottom). Observable is more like a spreadsheet where any cell/value referenced can update automatically (in any order). This makes it fun to use when composing interactive visualizations.\nWhy use Observable when there are so many interactive data visualization libraries in both R and Python? Well my take is that every interactive data visualization library in R and Python probably has JavaScript running under the hood. I feel like the only reasons we use these libraries are:\n\nWe don’t want to learn another language (especially JavaScript).\nJavaScript is geared towards web developers who understand all of the other pieces needed (the DOM, HTML, CSS, SVG, Canvas, SSR, Frameworks, etc).\nData wrangling in R and Python is a lot easier and more powerful than in JavaScript.\n\nBut since JavaScript is the language that manages interactivity on the web, it only makes sense to use it for interactive data visualizations. Observable helps us use JavaScript without the trouble of not knowing what we are doing as non-web developers."
  },
  {
    "objectID": "posts/hello-observable/index.html#introduction",
    "href": "posts/hello-observable/index.html#introduction",
    "title": "Hello, Observable!",
    "section": "",
    "text": "Observable is a new environment for JavaScript with a couple of tweaks (also supports HTML, CSS, Markdown, SQL, and TeX). It is the brainchild of Mike Bostock (D3.js creator). What sets Observable apart from previous programming notebook environments is its reactive runtime. In previous notebook iterations like Jupyter and R Markdown each cell could only reference previous cells in a certain order (from top to bottom). Observable is more like a spreadsheet where any cell/value referenced can update automatically (in any order). This makes it fun to use when composing interactive visualizations.\nWhy use Observable when there are so many interactive data visualization libraries in both R and Python? Well my take is that every interactive data visualization library in R and Python probably has JavaScript running under the hood. I feel like the only reasons we use these libraries are:\n\nWe don’t want to learn another language (especially JavaScript).\nJavaScript is geared towards web developers who understand all of the other pieces needed (the DOM, HTML, CSS, SVG, Canvas, SSR, Frameworks, etc).\nData wrangling in R and Python is a lot easier and more powerful than in JavaScript.\n\nBut since JavaScript is the language that manages interactivity on the web, it only makes sense to use it for interactive data visualizations. Observable helps us use JavaScript without the trouble of not knowing what we are doing as non-web developers."
  },
  {
    "objectID": "posts/hello-observable/index.html#tutorials",
    "href": "posts/hello-observable/index.html#tutorials",
    "title": "Hello, Observable!",
    "section": "Tutorials",
    "text": "Tutorials\nSo I know notebooks are not for everyone, but I think they are a great resource for learning (which for me is half the fun of programming). I started using Observable, about two years ago because of this Vega-Lite tutorial (pictured below) by Jeffrey Heer at the University of Washington.\n \nThis was the start of the adventure for me. After learning the basics I was hooked. I learned more about what Observable itself is capable of doing. They have a great YouTube channel with plenty of live-streams and tutorials. They also have notebook tutorials on D3, their new Observable Plot, and how to analyze time series data. There are plenty of other contributors too. These two tutorials on D3: Tyler Wolf’s 25 Days of D3 and NYU Visualization’s Guides/Examples, were both very helpful. I find the community encouraging. The ability to interact with the code and fork other user’s notebooks has been a huge bonus. I regularly find interesting notebooks where I import a part to use for my own work. Mike Freeman, Philippe Rivière, Ian Johnson, and of course Mike Bostock have been integral to my learning."
  },
  {
    "objectID": "posts/hello-observable/index.html#imports",
    "href": "posts/hello-observable/index.html#imports",
    "title": "Hello, Observable!",
    "section": "Imports",
    "text": "Imports\nIn Observable, you can import anything. Whether it is a chart, function, data, input, etc. I will show you a few examples here and give you further reading if you want to get into the details.\n\nimport {chart as streamgraph} from \"@d3/streamgraph-transitions\"\n\n\n\n\n\n\nThe cell above imports a chart from a notebook in the D3 Gallery. It was created by Mike Bostock as an example of what you can do with D3 transitions. Here I am using it as an example of how easy it is to import things. In the cell below all I had to do was type streamgraph and voila.\n\nstreamgraph\n\n\n\n\n\n\nIf we wanted to import a map and a drop down menu from another notebook. We could do that too. This drop down menu (input) selects different map projections. Check it out! It is also interactive. Use your mouse to click and drag to explore.\n\nimport {chart as map, viewof projectionName} from \"@d3/versor-dragging\"\n\n\n\n\n\n\n\nviewof projectionName\n\n\n\n\n\n\n\nmap\n\n\n\n\n\n\nBelow I imported an example dataset and some functions to add my own twist to the chart. Mike Freeman created some add-on functions for Observable Plot that enable you to both customize the tooltips and animation. So I over engineered this faceted scatter plot to animate the dots and when you hover over the dot it shows both a tooltip and enlarges the dot.\n\nimport {barley} from \"@observablehq/plot-facets\"\nimport {addTooltips} from \"@mkfreeman/plot-tooltip\"\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisibility().then(() =&gt;\naddAnimation(addTooltips(Plot.plot({ // I just added these wrappers to the beginning and\n  marginTop: 50,\n  marginLeft: 110,\n  height: 800,\n  grid: true,\n  x: {\n    nice: true\n  },\n  y: {\n    domain: d3.groupSort(barley, g =&gt; -d3.median(g, d =&gt; d.yield), d =&gt; d.variety),\n    inset: 5\n  },\n  fy: {\n    domain: d3.groupSort(barley, g =&gt; -d3.median(g, d =&gt; d.yield), d =&gt; d.site)\n  },\n  color: {\n    type: \"categorical\"\n  },\n  facet: {\n    data: barley,\n    y: \"site\",\n    marginRight: 90\n  },\n  marks: [\n    Plot.frame(),\n    Plot.dot(barley, {x: \"yield\", y: \"variety\", r: 0, stroke: \"year\", title: (d) =&gt; \n      `Yield: ${parseFloat((d.yield).toFixed(1))}  \\n Variety: ${d.variety} \\n Year: ${d.year} \\n Site:${d.site}`}) // this line for the tooltip titles and\n  ] // this line on the end to add animation and enlarge the dots on hover\n}), {r:15}), {type: \"circle\", attribute: \"r\", endValue: 3, delay: 100} ))\n\n\n\n\n\n\nBut wait that is not all that you can do! You can also modify your imported charts with your own or somebody else’s data. Here is an example of using a Bar Chart Race with the data from the original notebook.\n\nimport {chart as barChartRace, viewof replay} from \"@d3/bar-chart-race\"\n\n\n\n\n\n\n\nviewof replay\n\n\n\n\n\n\n\nbarChartRace\n\n\n\n\n\n\nSo above is what it would look like if I didn’t change the data. Below is what it looks like after I import different data. This data comes from Emil Hvitfeldt’s notebook where he uploaded a csv file of R package downloads over time. I could have also uploaded my own csv file, it just has to match the format of the data for the imported chart.\n\nimport {data as rPackages} from \"@emilhvitfeldt/race-for-most-downloaded-r-package\"\nimport {chart as rRace, viewof replay as replay2} with {rPackages as data} from \"@d3/bar-chart-race\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof replay2\n\n\n\n\n\n\n\nrRace\n\n\n\n\n\n\nA couple of things to note before we move on. You may have noticed that most of the charts were named charts in their original notebooks. In order to use more than one imported chart in this notebook I had to change the name. Otherwise, Observable would get confused if I referred to multiple cells with the same name. So in order to do that I use the as newName syntax. Additionally, it is easy to reference whichever Observable notebook you want by using the end of the URL. For example, I referenced most of the D3 charts by using from \"@D3/nameofnotebook\". There is a lot more to learn about imports and how useful they can be. Here is an introduction and here is an explainer of a new feature where you can “lock” your imports so that if a dependency changes it doesn’t ruin your import."
  },
  {
    "objectID": "posts/hello-observable/index.html#inputs",
    "href": "posts/hello-observable/index.html#inputs",
    "title": "Hello, Observable!",
    "section": "Inputs",
    "text": "Inputs\nObservable has some built-in libraries to help with user inputs. It leverages views which is a clever and way less confusing way to handle interactions and their outputs on the web.\nIn the cell below I gave a range of values 0 to 25, I gave a starting value value: 10 and I gave an interval to step between values in our range step: 1 and then I just named it r so we can reference it later. In Observable notebooks, viewof creates reactive variables of inputs so if I just do the following below.\n\nviewof r = Inputs.range([0, 25], {value: 10, step: 1})\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\nIt updates when we move the slider. This works both in JavaScript and in Markdown here is the number: . This r variable can be plugged into anything we want. Lets add some color and data to make a chart.\n\nimport {penguins} from \"@enjalot/palmer-penguins\"\n\n\n\n\n\n\n\nviewof color = Inputs.radio([\"red\", \"green\", \"blue\"], {value: \"red\"})\n\n\n\n\n\n\nI reused the addTootips function I imported earlier and added the two reactive input variables we just created r and color. These two variables control the attributes when you hover over the dots in this visualization. Go ahead and change the fill color and size of the dots with the inputs above.\n\naddTooltips(\nPlot.plot({\n  grid: true,\n  facet: {\n    data: penguins,\n    x: \"sex\",\n    y: \"species\",\n    marginTop: 50,\n    marginRight: 80\n  },\n  marks : [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"flipper_length_mm\", y: \"body_mass_g\", stroke: \"island\", title: (d) =&gt;\n        `${d.species} \\n flipper length: ${d.flipper_length_mm} mm \\n body mass: ${d.body_mass_g} g`})\n  ]}), {r: r, fill: color}) //This is where the reactivity is happening\n\n\n\n\n\n\nThis also makes interacting with data very easy. Here are some NBA team names with their location.\n\nteams = [\n  {name: \"Lakers\", location: \"Los Angeles, California\"},\n  {name: \"Warriors\", location: \"San Francisco, California\"},\n  {name: \"Celtics\", location: \"Boston, Massachusetts\"},\n  {name: \"Nets\", location: \"New York City, New York\"},\n  {name: \"Raptors\", location: \"Toronto, Ontario\"},\n]\n\n\n\n\n\n\n\nviewof favorite = Inputs.radio(teams, {value: teams[0], label: \"Favorite team\", format: x =&gt; x.name})\n\n\n\n\n\n\nSo the cell above creates our input. It takes the teams dataset and uses the first variable in the array as its starting value value: teams[0]. The format option specifies how you want to present the value to the reader.\n\nfavorite.location\n\n\n\n\n\n\nThe name of the reactive input variable is favorite and we can access whichever variable in the dataset by putting a . and then the name of that variable. In this case it is location. To show the location of the team you can use the ${favorite.location} in the markdown. Try clicking on the radio buttons to see the different locations: . This way of writing in markdown is valuable when you want to create data driven documents. No need to edit your values manually in word documents anymore.\nBelow is an example of filtering a dataset (I am reusing the penguins dataset here). Click on the options below and see how the data changes when you select different options.\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(penguins, (d) =&gt; d.island),\n  { key: [\"Dream\", \"Torgersen\"]}\n)\n\n\n\n\n\n\n\nfiltered = checkbox.flat()\n\n\n\n\n\n\n\nPlot.dot(filtered, {x: \"flipper_length_mm\", y: \"body_mass_g\", stroke: \"island\"}).plot()\n\n\n\n\n\n\nThe chart above uses the filtered dataset to create the scatterplot. As you can imagine there are endless capabilities of pairing these reactive input variables with whatever you are trying to create. I won’t try to make something super complex right now, but explore Observable and you will get a sense of the possibilities."
  },
  {
    "objectID": "posts/hello-observable/index.html#data-wrangling-and-analysis",
    "href": "posts/hello-observable/index.html#data-wrangling-and-analysis",
    "title": "Hello, Observable!",
    "section": "Data Wrangling (and Analysis)",
    "text": "Data Wrangling (and Analysis)\nOriginally, when I first started using Observable I would wrangle my data in R and then save a CSV file and then upload it to Observable. Since then I found Arquero which has been really awesome! There is actually a Tidy Data in JavaScript using Arquero that follows Hadley Wickham’s Tidy Data (Chapter 12, R for Data Science). Also this Illustrated Guide to Arquero Verbs is a good cheat sheet.\nData manipulation in vanilla JavaScript is still wonky to me. It makes very little sense in my head. A concern I had in the beginning was doing all of my data work in the browser. Saving my work online with a relatively new service gave me pause. For now Observable allows you to create unlimited amounts of notebooks for free. I have made over one hundred notebooks, and have not had any problems so far. Another concern I had (kinda still have) was Observable’s reliance on the browser’s engine. It is not yet equipped for processing big data files. File sizes are limited to 50 MBs per notebook and 1 GB over a 28-day period. There are alternatives like connecting to databases through Observable or using web APIs, but even then it is smart to subset your data if it is over a certain number of MBs for performance.\nLuckily, I found a promising new product that will probably be my go to work environment very soon. It is called Quarto. It is a project sponsored by Rstudio that integrates Observable JS, Julia, R, and Python. It does a lot of cool things that I won’t even touch on but the coolest to me is the ability to write in both R and Observable within the same notebook. So if you need to do something with a large dataset it is possible to preprocess it in R and then do what you want in Observable. There is an option to freeze the execution of R if you are doing some heavy processing and you don’t want it to run every time someone loads your site. Additionally, it looks like you can pair Observable with Shiny Reactives. Leveraging a Shiny server with an Observable front end seems super convenient for any cases where Observable alone can’t handle the workload. I haven’t used it enough to give my full thoughts on it yet, but so far it has been extremely promising development for my workflow."
  },
  {
    "objectID": "posts/hello-observable/index.html#sharing-your-work",
    "href": "posts/hello-observable/index.html#sharing-your-work",
    "title": "Hello, Observable!",
    "section": "Sharing Your Work",
    "text": "Sharing Your Work\nAfter you finish your project you can share your notebook within the Observable ecosystem or link it on social media. If you want it to live on your website there are a couple of ways to do that as well. Observable has exporting abilities, a download code option or an embed option. I usually just use the embed option. You can embed it as an iframe, or you can embed it with Observable’s runtime in JavaScript. This is usually what I do, so although you are relying on Observable’s runtime, you can actually customize all of the styling within your own environment. If you choose to go the Quarto route, it is also super easy to either create a stand alone html file or a whole site through Quarto. You are probably looking at this notebook how Quarto rendered it, but here is the original Observable notebook as well. Thanks for reading this post. Please let me know if there are really cool things about Observable I missed."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html",
    "href": "posts/pet-cats-uk/index.html",
    "title": "UK Pet Cats",
    "section": "",
    "text": "I wanted to do a Tidy Tuesday blog post for a while now and I finally carved out some time to make one. This week has tracking data from a study on pet cats, looks like only the UK test site was included. Checkout the Github Readme for more info."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#introduction",
    "href": "posts/pet-cats-uk/index.html#introduction",
    "title": "UK Pet Cats",
    "section": "",
    "text": "I wanted to do a Tidy Tuesday blog post for a while now and I finally carved out some time to make one. This week has tracking data from a study on pet cats, looks like only the UK test site was included. Checkout the Github Readme for more info."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#data-processing",
    "href": "posts/pet-cats-uk/index.html#data-processing",
    "title": "UK Pet Cats",
    "section": "Data Processing",
    "text": "Data Processing\nI decided to use Observable JS this week and imported the Arquero library in the spirit of being tidy. Arquero is basically dplyr for JavaScript, so if you were too annoyed or intimidated by JavaScript data wrangling methods before hopefully this gives you another excuse to try it out. I didn’t do much processing this week, just combined the cats_uk.csv with the cats_uk_reference.csv. I left in all of the outliers and didn’t compute any summary statistics. You can download my combined dataset by clicking on the button below.\n\n\nCode\nimport { aq, op } from \"@uwdata/arquero\"\nimport {button} from \"@jeremiak/download-data-button\"\n\ncats_uk = aq.loadCSV(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk.csv\")\n\ncats_uk_ref = aq.loadCSV(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk_reference.csv\")\n\ncombine = cats_uk.join(cats_uk_ref)\ndata = combine.objects()\n\nInputs.table(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbutton(data, \"UK_Cats.csv\")"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#uk-cat-timeline",
    "href": "posts/pet-cats-uk/index.html#uk-cat-timeline",
    "title": "UK Pet Cats",
    "section": "UK Cat Timeline",
    "text": "UK Cat Timeline\nFirst, I wanted to see how long each cat was tracked. It looked like the majority were tracked for only a week or less (except for Jessie and Macauley Mccat). If you hover over the bar for each cat with your mouse it will give you more information. In addition, I colored the cats’ bars by the number of reported hours they were indoors. But if you would prefer to group them differently try the following options.\n\n\nCode\nviewof color = {\n  const values =new Map([[\"# of Hours Indoors\", \"hrs_indoors\"], [\"# of Cats in Household\", \"n_cats\"], [\"Sex\", \"animal_sex\"], [\"Reproductive Status\", \"animal_reproductive_condition\"]]);\n  return Inputs.radio(values, {\n    key: values.keys().next().value\n  });\n}\n\ntime = d3.timeFormat(\"%B %d, %Y\")\n\nPlot.plot({\n  marginLeft: 50,\ncolor:{\n    scheme: \"Tableau10\",\n    label: color,\n    type: \"ordinal\",\n    legend: \"ramp\"\n  },\n  x: {\n    axis: \"top\",\n    grid: true\n  },\n  y: {\n    axis: null,\n    domain: d3.sort(data, d =&gt; d.deploy_on_date).map(d =&gt; d.animal_id)\n  },\n  marks: [\n    Plot.barX(data, {\n      x1: \"deploy_on_date\",\n      x2: \"deploy_off_date\",\n      y: \"animal_id\",\n      fill: color,\n      title: (d) =&gt; `${d.animal_id}\\nStudy Length: ${time(d.deploy_on_date)} - ${time(d.deploy_off_date)} \\nSex: ${d.animal_sex == \"m\" ? \"male\": \"female\"} \\nAge: ${d.age_years} years old \\n# of Cats in Household: ${d.n_cats}`\n    }),\n     Plot.text(cats_uk_ref.objects(), {\n      x: \"deploy_on_date\",\n      y: \"animal_id\",\n      text: \"animal_id\",\n      textAnchor: \"end\",\n      dx: -3\n    })\n  ]\n})"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#explore-your-favorite-cat",
    "href": "posts/pet-cats-uk/index.html#explore-your-favorite-cat",
    "title": "UK Pet Cats",
    "section": "Explore Your Favorite Cat",
    "text": "Explore Your Favorite Cat\nThis section was heavily inspired by Plot’s density mark tutorial . I wanted to see each individual cat’s footprint for their respective week. You can select your favorite cat using the dropdown below. Some cats barely roamed at all, while others went all over the place. With this plot it is really easy to spot some of the outliers. You can play around with the thresholds and bandwidth of the plot as well.\n\n\nCode\nviewof cat = Inputs.select(data.map(d =&gt; d.animal_id), {value:\"Lightening Bugg\", label: \"Cat Tag\", sort: true, unique: true})\nviewof thresholds = Inputs.range([1, 40], {value: 10, step: 1, label: \"Thresholds\"})\nviewof bandwidth = Inputs.range([0, 40], {value: 20, step: 0.2, label: \"Bandwidth\"})\n\nPlot.plot({\n  inset:20,\n  marginLeft: 60,\n  marks: [\n    Plot.density(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", bandwidth, thresholds, clip: true}),\n    Plot.dot(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n’s Location in Relation to All Cats\nNow that you found  you can see where they are relative to all of their cat peers. As you can see there were a bunch in a pretty small area. Try picking another cat and see where they end up on this density plot.\n\n\nCode\ndensity.legend(\"color\", {marginLeft: 5, label: \"Density\"})\n\n\n\n\n\n\n\n\n\nCode\ndensity = Plot.plot({\n  inset: 40,\n  marginLeft: 40,\n  color: {\n    scheme: \"ylgnbu\",\n  },\n  marks: [\n    Plot.density(data, {x: \"location_long\", y: \"location_lat\", fill: \"density\", clip: true}),\n    Plot.dot(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", stroke:\"red\", }),\n    Plot.text(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", dx: 7, fill: \"currentColor\", stroke: \"white\", textAnchor: \"start\", text: (d) =&gt; `${cat}`}),\n    Plot.frame()\n  ]\n})"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#felt",
    "href": "posts/pet-cats-uk/index.html#felt",
    "title": "UK Pet Cats",
    "section": "Felt",
    "text": "Felt\nLast thing, I have been following Felt on twitter for a while now. I saw this tweet and immediately needed to try it. It was super simple to just drag and drop a .csv file and get going. Check it out! You should be able to edit this map if you create your own Felt account. Thanks for reading!\n\n\nCode\nhtml`\n&lt;iframe width=\"100%\" height=\"600\" frameborder=\"0\" title=\"Felt Map\" src=\"https://felt.com/embed/map/UK-Cats-Qkc0B5HpTzuh4xoLFJ446A?lat=50.418463&lon=-4.789399&zoom=9.138\"&gt;&lt;/iframe&gt;`"
  },
  {
    "objectID": "posts/R-TidyCensus/index.html",
    "href": "posts/R-TidyCensus/index.html",
    "title": "R TidyCensus with Observable",
    "section": "",
    "text": "As you may already know I am a big fan of ObservableJS. I use it to create dashboards at work and for fun side projects like this blog. I think a big advantage to ObservableJS is that it is an extension of JavaScript with a reactive runtime. JavaScript is the language of interactivity on the web. All of it can be run from your browser, you don’t even need a server like you do for Shiny.\nSure there are R packages that create interactive graphs and maps, but for the most part they are built on top of JavaScript. There are also limitations to the browser’s engine, you have to be wise with the amount of data you are using (or be wise about how you use it). But the degree to which you can customize your visualizations without knowing too much about web development is pretty unparalleled. Sure you could learn a JavaScript framework like React or Svelte and spend hours learning all of the related languages of the web.\nBut I find that ObservableJS allows you to live at the sweet spot of knowing just enough to do whatever you envision without being a full blown full stack web developer. Observable Plot just came out with some new mapping capabilities. There is a great tutorial on how to use these new features of Plot. But today I am going to show you how you can pair ObservableJS with the R tidycensus package using Quarto."
  },
  {
    "objectID": "posts/R-TidyCensus/index.html#introduction",
    "href": "posts/R-TidyCensus/index.html#introduction",
    "title": "R TidyCensus with Observable",
    "section": "",
    "text": "As you may already know I am a big fan of ObservableJS. I use it to create dashboards at work and for fun side projects like this blog. I think a big advantage to ObservableJS is that it is an extension of JavaScript with a reactive runtime. JavaScript is the language of interactivity on the web. All of it can be run from your browser, you don’t even need a server like you do for Shiny.\nSure there are R packages that create interactive graphs and maps, but for the most part they are built on top of JavaScript. There are also limitations to the browser’s engine, you have to be wise with the amount of data you are using (or be wise about how you use it). But the degree to which you can customize your visualizations without knowing too much about web development is pretty unparalleled. Sure you could learn a JavaScript framework like React or Svelte and spend hours learning all of the related languages of the web.\nBut I find that ObservableJS allows you to live at the sweet spot of knowing just enough to do whatever you envision without being a full blown full stack web developer. Observable Plot just came out with some new mapping capabilities. There is a great tutorial on how to use these new features of Plot. But today I am going to show you how you can pair ObservableJS with the R tidycensus package using Quarto."
  },
  {
    "objectID": "posts/R-TidyCensus/index.html#tidycensus-examples",
    "href": "posts/R-TidyCensus/index.html#tidycensus-examples",
    "title": "R TidyCensus with Observable",
    "section": "TidyCensus examples",
    "text": "TidyCensus examples\nThe tidycensus package is a nice and tidy way to interact with the Census API. Kyle Walker created the tidycensus R package and has a free book called Analyzing US Census Data that covers the package extensively. I highly recommend perusing it if this is the first time you have heard of the tidycensus package. Below are two examples straight from his book.\nWhen you first use tidycensus you will want to run the census_api_key() function. You can get a free API key from the Census. The second argument allows R to save your API key for future R sessions. So you don’t have to use this function everytime you use tidycensus. I wont go over the R code line by line but I commented in what each chunk is doing. Quarto enables us to use R for wrangling and pass the data into Observable.\n\nlibrary(tidycensus)\n\nWarning: package 'tidycensus' was built under R version 4.1.3\n\nlibrary(tidyverse)\n\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n\n\nv ggplot2 3.3.5     v purrr   0.3.4\nv tibble  3.1.6     v dplyr   1.0.7\nv tidyr   1.1.4     v stringr 1.4.0\nv readr   2.1.1     v forcats 0.5.1\n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\n# census_api_key(\"YOUR KEY GOES HERE\", install = TRUE)\n\n# gets median age of each state in 2010 census\nage10 &lt;- get_decennial(geography = \"state\", \n                       variables = \"P013001\", \n                       year = 2010) \n\nGetting data from the 2010 decennial Census\n\n\nUsing Census Summary File 1\n\n# function to make the data usable in Observable JS\nojs_define(example1 = age10) \n\n\nState Median Ages\nObservableJS has a bunch of inputs built in. Inputs.table() is an easy way to see your data in a table. It isn’t an input in this example because it isn’t connected to anything. It is just a table to see our data columns and rows visually. But if you hover on the left side of the table you can select certain rows. This could be used as an input to filter rows in a dataset. You can also sort the rows in either ascending or descending order if you click on the column header.\n\nInputs.table(transpose(example1))\n\n\n\n\n\n\nMy only complaint (and it is a small one) is that you need to transpose the data when it is passed into an ObservableJS environment from R. Which either means you always have to put your data name in a transpose() function or have another step to name your dataset so it looks prettier. But renaming your data all the time gets old fast. So I tend to just transpose inline.\n\nObservable Plot\nBelow I recreated Kyle’s basic ggplot2 example for comparison’s sake. Except I added a tooltip that enlarges the circle and shows the median age when you hover over it. This is obviously achievable in many R interactive graphing packages.\n\n\nCode\nimport {Plot} from \"@mkfreeman/plot-tooltip\" \n// Import tooltip functionality from this Observable notebook observablehq.com/@user/slug\n\nPlot.plot({\n    marginLeft: 100, // Add some space on the left for the state names\n    marks: [\n        Plot.dot(transpose(example1), \n        {x: \"value\", y: \"NAME\", title: (d) =&gt; `Median Age: ${d.value}`, sort: {y: \"x\"}})    \n  ],\n  tooltip: {\n    r: 15 // When mouse hovers make the radius of the dot 18 pixels\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this same example dataset I wanted to create a grid choropleth map so I could see if there is a relationship between age and region of the US.\n\n\nCode\nimport {grid} from \"@observablehq/observable-plot-grid-choropleth\" \n// map layout coordinates\n\n// This uses the state names from my example1 dataset\n// and maps on their coordinates for the grid layout\nstates = transpose(example1)\n  .filter((d) =&gt; grid.has(d.NAME))\n  .map((d) =&gt; ({ ...d, ...grid.get(d.NAME) }))\n\nPlot.plot({\n  height: 420,\n  x: { axis: null },\n  y: { axis: null },\n    color: {\n    type: \"linear\",\n    range: [\"#79e6df\", \"#515859\"] // uses d3.interpolateRgb\n  },\n  marks: [\n    Plot.cell(states, {x: \"x\", y: \"y\", fill: \"value\"}),\n    Plot.text(states, {x: \"x\", y: \"y\", text: \"key\", fill: \"white\", dy: -2}),\n    Plot.text(states, {x: \"x\", y: \"y\", text: \"value\", dy: 10, fill: \"white\"})\n  ]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt looks like in 2010 younger folks were not moving (and/or staying) to the northeast as much as they were to states like California, Texas, and Georgia. I think the Mormon influence of big families (lots of kids) probably explains younger median age in Utah and Florida’s reputation as a warm place to retire probably plays a role here as well.\n\n\n\nMetro Public Transit Ridership\nKyle had another example using American Community Survey data that I wrote in Observable Plot for comparison. Below is the R code that pulls the data we want from the Census API.\n\n# gets % of commuters who take public transit in the ACS 2019 survey\n# then takes top 20 metro areas and cleans up the names for Plot\nmetros19 &lt;-  get_acs(\n  geography = \"cbsa\",\n  variables = \"DP03_0021P\",\n  summary_var = \"B01003_001\",\n  survey = \"acs1\",\n  year = 2019) |&gt;\n  slice_max(summary_est, n = 20) |&gt;\n  mutate(NAME = str_remove(NAME, \"-.*$\")) |&gt;\n  mutate(NAME = str_remove(NAME, \",.*$\"))\n\nGetting data from the 2019 1-year ACS\n\n\nThe 1-year ACS provides data for geographies with populations of 65,000 and greater.\n\n\nUsing the ACS Data Profile\n\nojs_define(example2 = metros19)\n\n\nInputs.table(transpose(example2))\n\n\n\n\n\n\n\nObservable Plot\nAnd this is the recreation of the ggplot2 example with Observable Plot.\n\n\nCode\nPlot.plot({\n    marginLeft: 80,\n    marks: [\n        Plot.barX(transpose(example2), \n        {x: \"estimate\", y: \"NAME\",  title: (d) =&gt; `Public Transit Ridership: ${d.estimate}%`, sort: {y: \"x\", reverse: true}})    \n  ]\n})\n\n//Notice I used the tooltip functionality I imported earlier.\n\n\n\n\n\n\n\nGoing one step further I imported a D3 bubble chart. There are many cool things about ObservableJS as I will show you, but the ability to import bespoke D3 charts with so few lines of code is up there. If you click on a bubble it takes you to that city’s wikipedia page.\n\n\nCode\nimport {BubbleChart} from \"@d3/bubble-chart\"\n\nBubbleChart(transpose(example2), {\n  label: d =&gt; `${d.NAME}\\n${d.estimate}%`,\n  value: d =&gt; d.estimate,\n  group: d =&gt; d.NAME,\n  title: d =&gt; `${d.NAME}\\n${d.estimate}%`,\n  link: d =&gt; `https://en.wikipedia.org/wiki/${d.NAME}`\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see there are only about 6 major cities in the US that have public transit ridership at around 10% or higher. Someday I will make a blog post about why this is really sad and we need to do better. But today is not that day."
  },
  {
    "objectID": "posts/R-TidyCensus/index.html#a-deeper-dive",
    "href": "posts/R-TidyCensus/index.html#a-deeper-dive",
    "title": "R TidyCensus with Observable",
    "section": "A Deeper Dive",
    "text": "A Deeper Dive\nAlright now that we have the basic examples down I am going to look at variables at the county level. So lets do another API call through the tidycensus package and get what we are looking for.\n\ncounties &lt;- get_acs(\n  geography = \"county\",\n  variables = c(medinc = \"B19013_001\", # median income\n                medage = \"B01002_001\"), # median age\n  output = \"wide\", \n  year = 2020) |&gt;\n  mutate(county = str_remove(NAME, \"\\\\s.*$\")) |&gt;\n  mutate(state = str_extract(NAME, \"\\\\b[^,]+$\"))\n\nojs_define(example3 = counties)\n\nI did some string manipulation with the stringr package, because I wanted just the name of the county so it is easier to search for. I also wanted to keep the state info so I made a new state variable too.\n\nInputs.table(transpose(example3))\n\n\n\n\n\n\nE at the end of the variable name stands for estimate. M at the end stands for margin of error. This comes standard in tidycensus when you request a wide form dataset.\n\nObservable Inputs\nTo view a specific county’s income or age you can create a search input pretty easily. You can use the datalist option to give suggested county names. If you click on the search bar and delete “Washtenaw”, you should see a list of county name suggestions populate.\n\nviewof search = Inputs.text({\n  label: \"U.S. County\",\n  placeholder: \"Your County\",\n  width: 380,\n  datalist: transpose(example3).map(d =&gt; d.county),\n  value: \"Washtenaw\",\n  submit: true\n})\n\nsearch\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfilteredData = transpose(example3).filter(\n    ({ county }) =&gt; county.toLocaleLowerCase() === search.toLocaleLowerCase()\n  );\n\n\n\n\n\n\n\n\nWhen you hit submit you can see the name populate as a string. The viewof option allows you to just type your named input again to see the results. I am filtering the data based on that search variable I just made. I set them to lower case to not have an error due to punctuation. But multiple states have the same county name. Lincoln, Washington, or any president’s last name for example are popular county names in multiple states. To ensure we get the county from the right state I added simple radio button that will populate based on the filteredData we just created with the search input.\n\nviewof radio = {\n  const values = d3.group(filteredData, (d) =&gt; d.state);\n  return Inputs.radio(values, {\n    key: values.keys().next().value\n  });\n}\n\n\n\n\n\n\n\nradio\n\n\n\n\n\n\nNow I can see my radio object that is returned. I can use that data even in my markdown in Quarto. So for example this ${radio[0].NAME} Gives me this: . Which is controlled by both the search bar and the radio buttons above. So go ahead and search another name or click on a different state button and check back here. Median income in  is $ and the median age is  years old.\n\n\nObservable Maps\nBefore we can put our data on a map we need spatial data. Observable has a bunch of topojson files we can use to connect our county level data to our map projections.\n\nimport {us} from \"@observablehq/plot-geo\"\n// Importing a topojson file to connect our county level median age and income onto a US map\n\n// This combines our median age and income to a topojson file\ncounties = {\n  const income = new Map(transpose(example3).map(({GEOID, medincE}) =&gt; [GEOID, medincE]));\n  const age = new Map(transpose(example3).map(({GEOID, medageE}) =&gt; [GEOID, medageE]));\n  const state = new Map(transpose(example3).map(({GEOID, state}) =&gt; [GEOID, state]));\n  const counties = topojson.feature(us, us.objects.counties);\n  for (const county of counties.features) county.properties.medincE = income.get(county.id);\n  for (const county of counties.features) county.properties.medageE = age.get(county.id);\n  for (const county of counties.features) county.properties.state = state.get(county.id);\n  return counties;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBecause this is a topojson file now it would be pointless to view it in a table, because there are nested variables within. Instead Observable has a built in way of viewing JSON. all you need to do is type the name of your JSON dataset. Which I have been doing to show you results of inputs but it is also helpful for looking at nested data.\n\ncounties\n\n\n\n\n\n\nBelow is the Observable Plot’s new geo mark enabling a lot of D3 mapping capabilities in the same readable and easy to understand code format as Plot. I put in a dropdown menu to choose from different county names. Some are very common like Lewis, or Pike but some are original like Washtenaw or Kern. Because I am matching just the county name and not the the state it shows all counties that have that name in the US. Give it a try. If you hover over a county with your mouse it will show you a tooltip as well.\n\ndata3 = transpose(example3)\n\n// Select input\nviewof select = Inputs.select(data3, {format: x =&gt; x.county, label: \"U.S. County\", value: data3.find(t =&gt; t.NAME === \"Washtenaw County, Michigan\")})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI exposed the select object and how I find the name select.county.\n\nselect\n\n\n\n\n\n\n\nselect.county\n\n\n\n\n\n\n\n\nI seperated out the legend to show you can customize it with Plot. It is taking info from the color scale which is declared within the choropleth plot.\n\n\nCode\ncountyIncome.legend(\"color\", {width: 330, tickFormat: (d) =&gt; d3.format(\"($,.2r\")(d)})\n\n\n\n\n\n\n\n\n\nCode\ncountyIncome = Plot.plot({\n  projection: \"albers-usa\",\n  color: {\n    type: \"quantile\",\n    n: 8,\n    scheme: \"blues\",\n    label: \"Median Income\"\n  },\n  marks: [\n    Plot.geo(counties, {fill: (d) =&gt; d.properties.medincE, \n    title: (d) =&gt; `${d.properties.name} County, ${d.properties.state} \\n${d3.format(\"$,\")(d.properties.medincE)}`}),\n    Plot.dot(\n      counties.features,\n      Plot.centroid({\n        r:5,\n        stroke: \"red\",\n        filter: (d) =&gt; d.properties.name.match(select.county)\n      })),\n      Plot.text(\n      counties.features,\n      Plot.centroid({\n        text: (d) =&gt; `${d.properties.name} County \\n${d3.format(\"($,.2r\")(d.properties.medincE)}`, \n        fill: \"currentColor\",\n        stroke: \"white\",\n        textAnchor: \"start\",\n        dx: 7,\n        filter: (d) =&gt; d.properties.name.match(select.county)\n      }))\n  ],\n  tooltip: {\n    stroke: \"black\"\n  }\n})\n\n\n\n\n\n\n\nWell I planned out a bunch of other stuff to try, but I guess I should stop here before this gets too long. In the future I will play around with the combination of R and Observable. I would like to do some more mapping, some more complex interactions, and some other APIs. Thanks for reading and you have any questions or spotted something funky in my code that could be better let me know!"
  }
]